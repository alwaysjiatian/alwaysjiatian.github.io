<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mysql相关内容</title>
    <link href="/2024/03/18/Mysql%E7%9B%B8%E5%85%B3/"/>
    <url>/2024/03/18/Mysql%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>结构上来说，分为服务层，存储引擎层，日志层。</p><p>服务层：连接组件，提供连接池，对权限的校验，分析器先去查缓存，如果命中了直接返回，然后再用到优化器和执行器。优化器可以进行比如说索引的优化。联合索引 a,b,c但是可以直接使用 where b &#x3D; 2 and a &#x3D;3 and c&#x3D;4优化器直接将其优化掉。</p><p>​    索引（一种有序的能够实现快速查找的数据结构）  </p><p>  物理结构上可以分为    聚集索引  和  非聚集索引  (二级索引)两类。</p><p>如果存在主键，主键索引就是聚集索引若不存在主键，第一个唯一索引就是聚集索引。若两者都没有innodb会生成一个隐藏的rowid作为聚集索引。无论如何，聚集索引是一定存在的。聚集索引叶子节点下的值是行数据，二级索引下的值是id。比如说：select   from user where name &#x3D; ‘贾添’,这样一来就会先走二级索引，拿到了主键的id值再回表走聚集索引。因为聚集索引不要回表的原因，所以聚集索引的效率高。</p><p>从应用上可以划分为一下几类：  普通索引  、  唯一索引  （可以有 null）、  主键索引  （不可以有 null）、  联合索引  。</p><p>数据结构上一般有：   b+树索引   ，  b树索引  ，  hash索引  。</p><p>创建索引语句：create index idx_user_name  on user(name,email);查看索引：show index from table_name。删除索引：drop index index_name on table_name。</p><p>  数据库性能分析  ：show global status like’Com_______’(七个下划线)&#x2F;&#x2F;查看执行频次。</p><p>慢查询日志：记录了所有sql执行语句超过指定时间的日志。需要在Mysql的配置文件&#x2F;etc&#x2F;my.cnf中slow_query_log &#x3D; 1和（设置慢日志的时间为两秒）long_query_time &#x3D; 2.</p><p>show profile能够帮我们知道时间都耗费到哪里去了额，通过have_profiling参数，可以看到Mysql是否支持profile操作。select @@ have_profiling，然后在set profiling &#x3D; 1使之开启。show profile for query (表中id)。</p><p>MyISAM和InnoDB存储引擎的主要区别：事务，外键，行级锁。</p><p>索引失效的情况：模  型  数  空  运  最  快。使用like  模  糊查询时候，%在like前面。索引和表中数据类  型  不一致。对索引字段使用内部函  数  。索引列是  空  值。对索引列使用了加减乘除  运  算。  最  左匹配原则。全表扫描来的更  快  。</p><p>索引的设计原则：</p><p>（1）选择唯一性索引；</p><p>（2）为经常作为查询条件的字段建立索引；</p><p>（3）删除不再使用或者很少使用的索引；</p><p>（4）字段中重复值比较多的不适合建索引，比如性别；</p><p>如果就想使用like，那么可以使用覆盖索引保证其生效，即一个索引包含所有查询字段的值。</p><p>为何使用 B+树而非 B 树做索引？<br>（1）B+ 树减少了 IO 次数；<br>（2）B+ 树查询效率更稳定（查找效率固定为 O(log n)）；<br>（3）B+ 树更加适合范围查找（B+树叶子结点之间用链表有序连接）。</p><p>  数据库事务（一个不可分的数据库操作集合）  的特性：acid(原子性，一致性，隔离性，持久性)</p><p>（1）原子性：事务是最小的执行单位，不允许分割。事务的原子性<br>确保动作要么全部完成，要么完全不起作用<br>（2）一致性：事务执行前后，数据保持一致，多个事务对同一个数<br>据读取的结果是相同的<br>（3）隔离性：并发访问数据库时，一个用户的事务不被其他事务所<br>干扰，各并发事务之间数据库是独立的<br>（4）持久性：一个事务被提交之后。它对数据库中数据的改变是持<br>久的，即使数据库发生故障也不应该对其有任何影响。</p><p>  事务的隔离级别  ：读未提交，读已提交，可重复读（mysql的默认隔离级别），序列化。</p><p>  事务并发所产生的问题  ：脏读，不可重复读，幻读。</p><p>不可重复读幻读例证考：不可重———事务a中查询table时候查询到id&#x3D;1的人叫贾添。事务b将id&#x3D;1的人update为张三，并提交。事务a中间做了一些其他的操作，再查询id&#x3D;1的人叫张三。这是前后查询数据不一致的问题，会在并发更新的场景中出现。</p><p>幻读———事务a通过select  查询整个数据库的数据，没有发现name &#x3D; ‘贾添’的数据。此时事务b向其中insert贾添这条数据，并且提交。当事务a添加 贾添 时候发现这条数据已经存在了就像一个幻影一样。这是前后查询数据量不一致的问题。会在并发删除，添加的环境中出现。</p><p>  说下不可重复读和幻读的区别（概括）  :不可重复读：在并发更新时，另一个事务前后查询数据不一样。幻读：删除或者新增产生数量变化时，另一事务修改或者删除发现影响的行数不一样</p><p>关于  锁  ：</p><p><img src="/2024/03/18/Mysql%E7%9B%B8%E5%85%B3/3b97a8e0af514c99aae8a85d781e2351.png" alt="锁的本质是为保证数据库数据一致性在高并发访问变得有序而设计的一种规则"></p><p>  表锁  ：表共享读锁（S）,表独占写锁（X）</p><p>加表锁：lock tables table_name Read&#x2F;Write;释放表锁：unlock tables;</p><table><thead><tr><th>兼容性</th><th>S</th><th>X</th></tr></thead><tbody><tr><td>S</td><td>兼容</td><td>不兼容</td></tr><tr><td>X</td><td>不兼容</td><td>不兼容</td></tr></tbody></table><p>  行锁  ：共享锁，排它锁。</p><p>在innodb引擎的RR隔离级别下，增删改语句走索引项的where子句都可以获得一个X，select   from stu where id &#x3D; 1 for update&#x2F;lock in share mode获X&#x2F;获S,同时为这一张表获得意向共享锁或者意向排它锁。</p><p>该引擎也是通过临键锁进行搜索和索引扫描以此来解决幻读的问题。</p><p>  意向锁  （表级锁）：意向共享锁IS,意向排它锁IX。为了避免DML时加的行锁与表锁起冲突，在innodb中引入了意向锁，使得表锁不用检查每一行是否加了行锁。使用意向锁来减少表锁的检查。</p><p>  间隙锁  ：两个记录之间的间隙加锁，从而保证某个间隙内的数据在锁定情况下不会发生任何变化，有效解决了在并发事务在两条记录之间insert而产生的幻读问题。</p><p>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁。</p><p>行锁和表锁不能同时存在，意向锁用以解决两者之间的冲突。</p><p>  mysql中的细节点：  </p><ol><li>UNION 和 UNION ALL 的区别  :</li></ol><ul><li><code>UNION</code>: 用于合并两个或多个 SELECT 语句的结果集，并去除重复行。</li><li><code>UNION ALL</code>: 也用于合并两个或多个 SELECT 语句的结果集，但不去除重复行，保留所有行。</li><li>UNION ALL的效率更高。</li></ul><ol start="2"><li>IN 和 EXISTS 的区别  :</li></ol><ul><li><code>IN</code>: 用于子查询中，判断一个值是否在子查询返回的结果集中。</li><li><code>EXISTS</code>: 用于检查主查询中是否存在子查询返回的结果，通常用于关联查询，只关心子查询是否有结果，而不关心具体返回的内容。</li></ul><ol start="3"><li>LOCK IN SHARE MODE 和 FOR UPDATE 的区别  :</li></ol><ul><li><code>LOCK IN SHARE MODE</code>: 在读取数据时会对选定的行进行共享锁定，其他事务可以读取但不能修改该行数据。表加上意向共享锁。</li><li><code>FOR UPDATE</code>: 在读取数据时会对选定的行进行排他性锁定，其他事务无法读取或修改该行数据，直到当前事务释放锁定。表加上意向排它锁。</li></ul><ol start="4"><li>Redo Log 和 Undo Log 的区别  :</li></ol><ul><li><code>Redo Log</code>: 用于恢复数据库中未提交的事务更改，以保证事务的持久性。</li><li><code>Undo Log</code>: 用于在事务回滚或 MVCC 中提供数据的一致性和隔离性。</li></ul><ol start="5"><li>CHAR 和 VARCHAR 的区别  :</li></ol><ul><li><code>CHAR</code>: 存储定长字符串，如果字符串长度不够，会用空格填充。</li><li><code>VARCHAR</code>: 存储可变长度字符串，实际长度根据存储的内容确定，节省存储空间。</li></ul><ol start="6"><li>COUNT(\ )、COUNT(1)、COUNT(字段名) 的区别  :</li></ol><ul><li><code>COUNT( )</code>: 统计表中所有行的数量，包括 NULL 值。</li><li><code>COUNT(1)</code>: 与 <code>COUNT( )</code> 类似，统计表中所有行的数量，但不会统计 NULL 值。</li><li><code>COUNT(字段名)</code>: 统计指定字段非 NULL 值的数量。</li></ul><ol start="7"><li>MyISAM 和 InnoDB 的区别  :</li></ol><ul><li>&#96;外键，事务，行级锁。</li></ul><ol start="8"><li>WHERE 和 HAVING 的区别  :</li></ol><ul><li><p><code>WHERE</code>: 用于对行进行过滤，条件应用于行级数据。</p></li><li><p><code>HAVING</code>: 用于对分组后的结果进行过滤，条件应用于分组或聚合数据。仅在使用 GROUP BY 语句时才能使用 HAVING。</p></li></ul><p>  如何获取 select 语句执行计划<br>explain sql;<br>其中重点查看 possible_keys 和 key。<br>possible_keys：显示可能应用在这张表中的索引，一个或多个。查询到的索引不一定是真正被使用。<br>Key：实际使用的索引，如果为 null 则表示没有使用索引。因此会出现 possible_keys 列有可能被用到的索引，但是 key 列为 null。</p><p>  sql 语句什么时候会出现 filesort<br>一般 sql 有 order by 排序产生，索引使用不当的情况下会出现，<br>比如 select   from a where type &#x3D; 5 order by createtime desc，这类语句<br>一般会产生 Using filesort 这个选项，即使在 type 和 createtime 上<br>分别添加了索引。因为先根据 type 的索引从所有数据信息中挑选出<br>满足 type &#x3D; 5 条件的，然后根据 createtime 列的索引信息对挑选的<br>数据进行排序，所以产生了 Using filesort<br> 解决办法:可以在 type, createtime 两列上建立一个联合索引 </p><p>  假如给一张数据量很大的表加索引，或者加字段，需要怎么操作<br>肯定不能直接加，如果直接加字段操作会锁表，还可能造成数据<br>库卡死。<br>有 2 种方法，<br>① 创建一个临时的新表，首先复制旧表的结构（包含索引）<br>② 给新表加上新增的字段<br>③ 把旧表的数据复制过来<br>④ 删除旧表，重命名新表的名字为旧表的名字<br>不过上述这种会造成比较少的数据损失，在第三步可能还有数据<br>写入进旧表<br>还有一种方法可以在从库进行加字段操作，然后主从切换，这样<br>数据丢失可能性很小</p><p>  .Mysql 如何排查死锁<br>可以修改 MySql 系统参数 innodb_print_all_deadlocks 设置成 1，开启状态，这样当发生死锁时，死锁日志会记录到 MySQL 的错误日志文件中。也可以查看线上的服务器日志</p>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有关Model学习分享</title>
    <link href="/2024/03/15/%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    <url>/2024/03/15/%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p> Model 或者 ModelMap 的实例都是spirng mvc框架来自动创建并作为控制器方法参数传入，用户无需自己创建。 而且需要return 返回指定的页面路径.因为<code>Model</code> 本身不能设置页面跳转的 <code>url</code> 地址别名或者物理跳转地址，我们可以通过控制器方法的返回值 <code>renturn</code> 来设置跳转 <code>url</code>，<code>Model</code> 是用 <code>addAttribute()</code> 方法设置返回的值的所以说如果要用到@ResponseBody时候是不可以这么使用的。ModelMap或者Model通过addAttribute方法向页面传递参数.其中addAttribute方法参数有多种方式：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim">public <span class="hljs-type">ModelMap</span> addAttribute(<span class="hljs-type">String</span> attributeName, <span class="hljs-type">Object</span> attributeValue)<span class="hljs-meta">&#123;...&#125;</span><br>public <span class="hljs-type">ModelMap</span> addAttribute(<span class="hljs-type">Object</span> attributeValue)<span class="hljs-meta">&#123;...&#125;</span><br>public <span class="hljs-type">ModelMap</span> addAllAttributes(<span class="hljs-type">Collection</span>&lt;?&gt; attributeValues) <span class="hljs-meta">&#123;...&#125;</span><br>public <span class="hljs-type">ModelMap</span> addAllAttributes(<span class="hljs-type">Map</span>&lt;<span class="hljs-type">String</span>, ?&gt; attributes)<span class="hljs-meta">&#123;...&#125;</span><br></code></pre></td></tr></table></figure><p>SpringMVC会把Model（模型信息）中的的数据放入到request域对象中，页面可以通过<a href="https://so.csdn.net/so/search?q=EL%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">EL表达式</a>来取request域中的数据。案例如下，在后台使用Model的addAttribute方法，页面使用EL表达式取数据。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/model&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelController</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Model的使用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> model</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/add&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String add(Model model)&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<span class="hljs-comment">//</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">在页面success.jsp从request域中取数据使用EL表达式<br><br><span class="hljs-variable">$&#123;msg&#125;</span><br><span class="hljs-variable">$&#123;requestScope.msg&#125;</span><br></code></pre></td></tr></table></figure><p>一般来说，可以用model来接收各种类型的数据，如果使用来接收一组数据List那么这个时候的model实际上是ModelMap</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;listCategory2&quot;</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> listCategory2(Model model) <br></code></pre></td></tr></table></figure><pre><code class="hljs">    // 接收查询的信息    List&lt;Category&gt; cs2= categoryService.list();    // 封装了查询的数据    model.addAttribute(&quot;test&quot;, cs2);    //重要！！需要给出返回model跳转的路径    return &quot;listCategory2&quot;;&#125;</code></pre><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;test &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attr">varStatus</span>=<span class="hljs-string">&quot;st&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;c.id&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;c.name&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>ModelAndView<br>ModelAndView的实例是需要我们手动new的，这也是和ModelMap的一个区别。</p><p>将 Controller 控制器方法中处理的结果数据传递到前端页面，也就是把在页面上需要的数据放到 ModelAndView 对象中即可，使用 ModelAndView 对象调用如下方法即可。其作用类似于 request 对象的 setAttribute() 方法的作用，用来在一个请求过程中传递处理的数据</p><p>而且，ModelAndView 可以自己寻址，只需要return 返回其对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;listCategory&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">listCategory</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-comment">//创建一个模型视图对象</span><br>      <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>      <span class="hljs-comment">//获取到查询的数据</span><br>      List&lt;Category&gt; cs= categoryService.list();<br>      <br>      <span class="hljs-comment">// //将数据放置到ModelAndView对象view中,第二个参数可以是任何java类型</span><br>      mav.addObject(<span class="hljs-string">&quot;cs&quot;</span>, cs);<br>      <span class="hljs-comment">// 放入jsp路径指定跳转的路径</span><br>      mav.setViewName(<span class="hljs-string">&quot;listCategory&quot;</span>);<br>       <span class="hljs-comment">//返回ModelAndView对象mav</span><br>      <span class="hljs-keyword">return</span> mav;<br>  &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- 使用c标签库，循环遍历出数据 ，命名为c--&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;cs&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attr">varStatus</span>=<span class="hljs-string">&quot;st&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;c.id&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;c.name&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><ul><li><p><code>Model</code> 只是用来传输数据的，并不会进行业务的寻址</p></li><li><p><code>ModelAndView</code> 却是可以进行业务寻址的，就是设置对应的要请求的静态文件，这里的静态文件指的是类似 <code>jsp</code> 的文件</p></li><li></li><li></li><li></li><li></li><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>韩信之死（有灵感了再续）</title>
    <link href="/2024/03/14/%E9%9F%A9%E4%BF%A1%E4%B9%8B%E6%AD%BB/"/>
    <url>/2024/03/14/%E9%9F%A9%E4%BF%A1%E4%B9%8B%E6%AD%BB/</url>
    
    <content type="html"><![CDATA[<p>很难从相国萧何的脸上捕捉到一丝喜怒哀乐，他如同一副木讷的躯壳僵在长乐宫钟室的门口，面色苍白，只有在眼角的肌肉时不时的颤动的间隙里，宫门持戟的侍卫才能辨别出他大约是个活生生的人。顺着萧何目光望去，正殿里横陈着一具被绑缚的尸体，脖颈处还依旧沽涌着血沫。没有人知道萧何在想什么，他停留了许久，直到地上的血迹变干变黑，才意识到是该动身启程了，未央宫的吕后还在等他带来淮阴侯伏诛的消息。</p><p>那是汉十年的正月，天气异常寒冷，萧何在路上走着走着碎雪就飘了下来，北风止不住的吹，继而变成了风绞雪，雪势也越来越大，视野变得迷离起来，近旁的宦官旋即给他披上一层毳衣。</p><p>现在的他酿酿跄跄的走着，瑟索的寒风扑在脸上格外生疼。</p>]]></content>
    
    
    
    <tags>
      
      <tag>韩信谋逆为假</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桃花山</title>
    <link href="/2024/03/14/%E6%A1%83%E8%8A%B1%E5%B1%B1/"/>
    <url>/2024/03/14/%E6%A1%83%E8%8A%B1%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p>从村子口放眼望向左边，就是一座雾气环绕的山头。漫山遍野粉色的桃花，总能在阳光下和山的轮廓呈现出朦朦胧胧的虚影，就好像性感的线条勾勒出一个一直迸发着情欲的女人，它离我似乎很近又好像很远。内心总有着声音驱使着我远离，却又是不自觉的靠近。</p><p>我不记得第一次是什么时候见到的这座山，又好像是从来没有见过，因为记忆里对它的映象几近枯竭，每每望向它的时候却又是稀松平常。</p><p>仅有的记忆是我知道有条小路可以上山的，路上时不时会想起犬吠的声音。桃花丛里隐着好几片人家，随处可见桃园里嬉戏玩耍荡着秋千的孩童。时而山民们敲锣打鼓举办着一些古老的庆典，热闹非凡，我们会互相打招呼做出问候，可是他们的脸却在我的脑子里愈发的模糊。</p><p>是朋友一再的坚持下，我们坐着一辆马车进山游玩。</p><p>我把自己相机的使用方法教会了她，她一脸震惊的样子让我有些忍俊不禁。</p><p>她莫名的兴奋，拿着相机在一直拍摄，时不时把我也拍了进去。行驶到进山的小径，路很狭窄，只能通过一辆马车的距离。路旁一座空着的秋千荡来荡去，屋庐初现，俄而响起三两声犬吠，蹦出两只的狗崽子，看见是我后冲我兴奋的摇起尾巴。四周除了哒哒马蹄声就是车轱辘转动 的声音，静谧的发慌。我瞧着她对我兴奋的诉说周围的景致，呜呜呀呀的声音渐渐暗淡，桃花尚未欣赏，一阵突如其来的困意却涌了上来，甚至不给我打一个哈欠的时间，倦怠感让我合上双眼睡去。</p><p>不知道是睡了多少时间，很短又像很长。</p><p>醒来亦是在马车上面。朋友还是十分的兴奋，拿着相机向我分享着里面的视频。我瞄了一眼，眼睛离不开这段视频了。阵阵寒意窜到身上像蚂蚁一样的撕咬。我看见视频里的山民们参与着记忆中的古老庆典，我和她被簇拥在了人群中间，都看起来很是精神抖擞，欢快活泼的样子。我们身着他们的衣服，同他们一起载歌载舞。</p><p>下一条视频是在进山口前我们一起荡着秋千，下下条视频是一起抱着狗儿在河边，往后的视频里是许多各色模样山民的脸，一群说不上名字却又对我来说并不陌生的人和我们同框在了画面里，后面的视频比比皆是，数量繁多。</p><p>可是啊，视频里的我越是荡漾着欢愉的笑容现在的我就越是感到害怕。</p><p>朋友的声音越来越清晰，音量越来越大，很是兴奋激动。可我听不清她的话，只能辨别出一些基本的词汇：“幼时”，“秋千”，“桃花”，“大黄”之类的，就像是七八百年前发音的古汉语。那一面涨红了的脸微笑着凑到我的跟前，刹那间却惊讶的发现自己根本不认识她，记忆里压根就没有这样的一张脸，就像记忆里没有桃花山一样。恐惧的洪水彻底在我的心底冲刷开来，伴随着陌生与害怕的情绪猛烈的泛滥。</p><p>她似乎是注意到了我惊慌失措的神情，那张桃花般的笑颜瞬间冷了下来，望着我的眼睛瞪的很大，眼泪忽然从里面沁了出来，她喉咙呜咽着，继而捂住脸彻底哭了起来。不知道在说些什么。</p><p>我呆坐在原地，疑惑不解，窘迫不堪。之前的恐惧像水面忽的泛起一阵涟漪，涟漪又回到水里，一切都那么的短暂且莫名其妙。</p><p>她上下翕动的嘴唇了说了一句：“山口到了，你走吧。”</p><p>这是我唯一听清楚的话。</p><p>哒哒的马蹄声止住了。我下了车，进山时候的那两只狗崽子跑到脚边上蹿下跳，它们都长成了大狗，尾巴不住的摆动。</p><p>“不一起走吗？”我摸着狗儿，回头望了她一眼。</p><p>她不再说话，摇了摇头，脸上的血色全无，目光移到旁边的秋千上，桃花一样的笑颜已然零落成泥，眼泪模糊了她的脸。</p><p>那一刻我才恍惚意识到她一直属于这里，这里是她的家。可是我也总是觉得自己也曾经属于这里,只是那些记忆是那么的模糊。人生的记忆本应该是像拼图一样从前到后一小块一小块拼成一副十分漂亮又或是平平淡淡，或奇谲瑰丽的画，每一个人都应该有着和别人不一样的画，因为我们都不知道自己什么时候会拼完，什么时候把画又拼的不一样。</p><p>约莫是以前拼好的碎片丢失了吧。</p><p>她也许恰好就在那些碎片上面。</p><p>马儿套着车缓缓的掉头，车上她的泪痕已经干了，默不作声翻看着相机里的影像。狗儿皱着眉头眼巴巴望着我，我才发现它旁边的秋千杆子上有刻着的我繁体的名字，以及许多行难以辨认的小字。只是她离我越来越远，我不知道应该报以什么样的心情向她道别，只能向着她的马车挥挥手，我不知道她有没有看见，只听得缘路的桃花发出了被风吹过枝丫簌簌的声音，和她的哭声一样。</p>]]></content>
    
    
    
    <tags>
      
      <tag>春梦一场罢了</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于spring中日志的使用</title>
    <link href="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>我们现实生活中，我们希望做任何事情都有迹可循，尤其在错误排除方面，所以引入了日志，是为了记录日志是程序的重要组成部分，想象一下，如果程序报错了，不让你打开控制台看日志，那么你能找到报错的原因吗？答案是否定的，写程序不是买彩票，不能完全靠猜，因此日志对于我们来说，最主要的用途就是排除和定位问题。</p><p><strong>Spring 框架本身并不提供日志功能</strong>，而是依赖于外部的日志框架。常用的日志框架包括 Log4j、Logback、java.util.logging 和 SLF4J。Spring 支持与这些日志框架集成，以便根据需要进行配置和使用。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446152505.png" alt="导入依赖的实例"></p><p>上图是我们导入日志时需要导入的包，同时也不要忘记导入相关的依赖到坐标里。</p><p>日志框架通常定义了多个日志级别，用于指定日志的重要性和详细程度。<strong>常见的日志级别包括 DEBUG、INFO、WARN、ERROR 等</strong>。可以根据自己的需求选择适当的日志级别来记录相应的日志信息。开发环境和生产环境中使用不同的配置。在开发环境中，可以将日志级别设置为 DEBUG ，以便进行详细的调试和跟踪。而在生产环境中，应将日志级别设置为较高级别（如 INFO）。</p><p>在使用 Spring 框架时，您需要将所选的日志框架配置到应用程序中。通常，这涉及到添加相应的依赖项到项目的构建文件，并提供一个配置文件来配置日志输出格式、日志级别等。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446578034.png" alt="配置文件对于日志的配置"></p><p><strong>日志记录器</strong>是使用日志框架时的核心组件。Spring 框架建议使用 SLF4J 的日志记录器接口来编写日志代码。可以通过获取一个 Logger 实例，并使用它的方法（如 debug()、info()、error() 等）来记录不同级别的日志信息。如下基于配置文件中的属性创建一个数据源对象，并将其用作应用程序中的数据源。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//创建一个日志记录器。通过 LoggerFactory 类的 getLogger() 方法获取一个 Logger 对象。getLogger() 方法需要传入一个 Class 类型的参数，用于指定日志的名称或标识符。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.<span class="hljs-built_in">getLogger</span>(AppConfig.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446762745.png" alt="日志信息的显示"></p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446979523.png" alt="在bean对象中对其日志进行相应的编写"></p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693447162211.png" alt="控制台显示的图片"></p><p>通过日志输出，可以了解数据源的创建过程以及配置的属性值。更好的帮助我们编程。<strong>使用日志记录可以帮助我们在开发和调试过程中快速定位问题，跟踪代码的执行路径，并记录关键信息。通过适当配置日志级别，可以在生产环境中减少日志量，从而提高应用程序的性能。</strong></p><hr><h2 id="spring如何对前端获取的数据与数据库进行交互处理。"><a href="#spring如何对前端获取的数据与数据库进行交互处理。" class="headerlink" title="spring如何对前端获取的数据与数据库进行交互处理。"></a>spring如何对前端获取的数据与数据库进行交互处理。</h2><p>Spring MVC 是 Spring 框架提供的一种基于 MVC（Model-View-Controller）模式的 Web 框架。<strong>可以在控制器（Controller）中定义请求处理方法，</strong>然后通过注解将前端传递的数据绑定到方法的参数上。可以使用注解来指定数据的来源（如请求参数、路径变量、请求体等）。然后，使用 Spring 的数据访问技术操作数据库。前端数据传递给控制器：前端通过 HTTP 请求将数据发送给后端的 Spring MVC 控制器。数据可以以不同形式传递，如请求参数、路径变量、请求体等</p><p><code>使用 </code>@RequestParam<code>注解可以将请求参数绑定到控制器方法的参数上。可以通过指定参数名来匹配请求中的对应参数，如</code>@RequestParam(“name”) String username<code>将请求参数中名为 &quot;name&quot; 的值绑定到</code>username&#96; 参数上。该注解还可以设置默认值、是否必须等属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/request1&quot;</span>)<span class="hljs-comment">//url-pattern</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">request1</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(value = <span class="hljs-string">&quot;user&quot;</span>, required = <span class="hljs-literal">false</span>, defaultValue = <span class="hljs-string">&quot;null&quot;</span>) <span class="hljs-built_in">String</span> username</span>)&#123;  <span class="hljs-comment">//就相当于username=request.getParameter(&quot;user&quot;)</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>如果请求的数据是 JSON 或 XML 格式的请求体数据，可以使用 <code>@RequestBody</code> 注解将请求体内容绑定到指定的对象参数上。Spring MVC 使用消息转换器将请求体的内容转换为对象，并将对象作为参数传递给控制器方法。</p><p>控制器方法接收到前端传递的数据后，可以调用业务逻辑层的服务或组件来处理数据。可以进行数据处理、逻辑判断、调用其他服务或组件等操作，对数据进行加工和处理。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693458723002.png" alt="1693458723002"></p><p>在业务逻辑层需要与数据库进行交互时，可以使用 Spring 的数据访问技术来操作数据库。可以选择使用MyBatis来进行数据访问。即进行到我们老生常谈的几部曲：给坐标导入Mybatis依赖，配置mybatis-config.xml文件，在其中配置好数据源、类型别名、映射器等。创建映射器接口：类似UserMapper，用于定义数据库操作的方法。每个方法对应一个 SQL 查询或更新操作。创建映射器 XML 文件（UserMapper.xml）。不要忘记在mybatis-config.xml里面注册映射器文件。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693459452409.png" alt="1693459452409"></p><p>在对数据库进行数据操作时，可以通过 Spring MVC 提供的事务管理功能来保证数据的一致性和完整性。可以使用 <code>@Transactional</code> 注解将控制器方法或业务逻辑层的方法标记为事务，确保一系列数据库操作要么全部成功，要么全部失败回滚。</p><p>经过数据处理和数据库交互后，可以将处理结果封装成合适的数据结构（如实体对象、DTO 对象）并返回给前端。可以使用 <code>ModelAndView</code>、<code>@ResponseBody</code> 注解等方式将数据返回给前端，供前端进行展示和处理。</p><p>比如说从 <code>userService</code> 获取所有用户的列表，并将该列表添加到模型中，然后将模型数据和视图名封装成一个 <code>ModelAndView</code> 对象返回给前端进行展示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123;<br>    List&lt;User&gt; userList = userService.getAllUsers();<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;user-list&quot;</span>)<span class="hljs-comment">//创建一个 ModelAndView 对象，并设置视图名为 &quot;user-list&quot;</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;users&quot;</span>, userList);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个例子就是可以直接通过@ResponseBody注解的方法返回值返还到前端页面。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693459893534.png" alt="1693459893534"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>这是我的第一篇博客</title>
    <link href="/2024/01/30/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/30/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>花了很大的力气，终于走到了这一步了。</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
