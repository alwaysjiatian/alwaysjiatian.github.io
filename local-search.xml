<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>韩信之死（有灵感了再续）</title>
    <link href="/2024/03/14/%E9%9F%A9%E4%BF%A1%E4%B9%8B%E6%AD%BB/"/>
    <url>/2024/03/14/%E9%9F%A9%E4%BF%A1%E4%B9%8B%E6%AD%BB/</url>
    
    <content type="html"><![CDATA[<p>很难从相国萧何的脸上捕捉到一丝喜怒哀乐，他如同一副木讷的躯壳僵在长乐宫钟室的门口，面色苍白，只有在眼角的肌肉时不时的颤动的间隙里，宫门持戟的侍卫才能辨别出他大约是个活生生的人。顺着萧何目光望去，正殿里横陈着一具被绑缚的尸体，脖颈处还依旧沽涌着血沫。没有人知道萧何在想什么，他停留了许久，直到地上的血迹变干变黑，才意识到是该动身启程了，未央宫的吕后还在等他带来淮阴侯伏诛的消息。</p><p>那是汉十年的正月，天气异常寒冷，萧何在路上走着走着碎雪就飘了下来，北风止不住的吹，继而变成了风绞雪，雪势也越来越大，视野变得迷离起来，近旁的宦官旋即给他披上一层毳衣。</p><p>现在的他酿酿跄跄的走着，瑟索的寒风扑在脸上格外生疼。</p>]]></content>
    
    
    
    <tags>
      
      <tag>韩信谋逆为假</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桃花山</title>
    <link href="/2024/03/14/%E6%A1%83%E8%8A%B1%E5%B1%B1/"/>
    <url>/2024/03/14/%E6%A1%83%E8%8A%B1%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p>从村子口放眼望向左边，就是一座雾气环绕的山头。漫山遍野粉色的桃花，总能在阳光下和山的轮廓呈现出朦朦胧胧的虚影，就好像性感的线条勾勒出一个一直迸发着情欲的女人，它离我似乎很近又好像很远。内心总有着声音驱使着我远离，却又是不自觉的靠近。</p><p>我不记得第一次是什么时候见到的这座山，又好像是从来没有见过，因为记忆里对它的映象几近枯竭，每每望向它的时候却又是稀松平常。</p><p>仅有的记忆是我知道有条小路可以上山的，路上时不时会想起犬吠的声音。桃花丛里隐着好几片人家，随处可见桃园里嬉戏玩耍荡着秋千的孩童。时而山民们敲锣打鼓举办着一些古老的庆典，热闹非凡，我们会互相打招呼做出问候，可是他们的脸却在我的脑子里愈发的模糊。</p><p>是朋友一再的坚持下，我们坐着一辆马车进山游玩。</p><p>我把自己相机的使用方法教会了她，她一脸震惊的样子让我有些忍俊不禁。</p><p>她莫名的兴奋，拿着相机在一直拍摄，时不时把我也拍了进去。行驶到进山的小径，路很狭窄，只能通过一辆马车的距离。路旁一座空着的秋千荡来荡去，屋庐初现，俄而响起三两声犬吠，蹦出两只的狗崽子，看见是我后冲我兴奋的摇起尾巴。四周除了哒哒马蹄声就是车轱辘转动 的声音，静谧的发慌。我瞧着她对我兴奋的诉说周围的景致，呜呜呀呀的声音渐渐暗淡，桃花尚未欣赏，一阵突如其来的困意却涌了上来，甚至不给我打一个哈欠的时间，倦怠感让我合上双眼睡去。</p><p>不知道是睡了多少时间，很短又像很长。</p><p>醒来亦是在马车上面。朋友还是十分的兴奋，拿着相机向我分享着里面的视频。我瞄了一眼，眼睛离不开这段视频了。阵阵寒意窜到身上像蚂蚁一样的撕咬。我看见视频里的山民们参与着记忆中的古老庆典，我和她被簇拥在了人群中间，都看起来很是精神抖擞，欢快活泼的样子。我们身着他们的衣服，同他们一起载歌载舞。</p><p>下一条视频是在进山口前我们一起荡着秋千，下下条视频是一起抱着狗儿在河边，往后的视频里是许多各色模样山民的脸，一群说不上名字却又对我来说并不陌生的人和我们同框在了画面里，后面的视频比比皆是，数量繁多。</p><p>可是啊，视频里的我越是荡漾着欢愉的笑容现在的我就越是感到害怕。</p><p>朋友的声音越来越清晰，音量越来越大，很是兴奋激动。可我听不清她的话，只能辨别出一些基本的词汇：“幼时”，“秋千”，“桃花”，“大黄”之类的，就像是七八百年前发音的古汉语。那一面涨红了的脸微笑着凑到我的跟前，刹那间却惊讶的发现自己根本不认识她，记忆里压根就没有这样的一张脸，就像记忆里没有桃花山一样。恐惧的洪水彻底在我的心底冲刷开来，伴随着陌生与害怕的情绪猛烈的泛滥。</p><p>她似乎是注意到了我惊慌失措的神情，那张桃花般的笑颜瞬间冷了下来，望着我的眼睛瞪的很大，眼泪忽然从里面沁了出来，她喉咙呜咽着，继而捂住脸彻底哭了起来。不知道在说些什么。</p><p>我呆坐在原地，疑惑不解，窘迫不堪。之前的恐惧像水面忽的泛起一阵涟漪，涟漪又回到水里，一切都那么的短暂且莫名其妙。</p><p>她上下翕动的嘴唇了说了一句：“山口到了，你走吧。”</p><p>这是我唯一听清楚的话。</p><p>哒哒的马蹄声止住了。我下了车，进山时候的那两只狗崽子跑到脚边上蹿下跳，它们都长成了大狗，尾巴不住的摆动。</p><p>“不一起走吗？”我摸着狗儿，回头望了她一眼。</p><p>她不再说话，摇了摇头，脸上的血色全无，目光移到旁边的秋千上，桃花一样的笑颜已然零落成泥，眼泪模糊了她的脸。</p><p>那一刻我才恍惚意识到她一直属于这里，这里是她的家。可是我也总是觉得自己也曾经属于这里,只是那些记忆是那么的模糊。人生的记忆本应该是像拼图一样从前到后一小块一小块拼成一副十分漂亮又或是平平淡淡，或奇谲瑰丽的画，每一个人都应该有着和别人不一样的画，因为我们都不知道自己什么时候会拼完，什么时候把画又拼的不一样。</p><p>约莫是以前拼好的碎片丢失了吧。</p><p>她也许恰好就在那些碎片上面。</p><p>马儿套着车缓缓的掉头，车上她的泪痕已经干了，默不作声翻看着相机里的影像。狗儿皱着眉头眼巴巴望着我，我才发现它旁边的秋千杆子上有刻着的我繁体的名字，以及许多行难以辨认的小字。只是她离我越来越远，我不知道应该报以什么样的心情向她道别，只能向着她的马车挥挥手，我不知道她有没有看见，只听得缘路的桃花发出了被风吹过枝丫簌簌的声音，和她的哭声一样。</p>]]></content>
    
    
    
    <tags>
      
      <tag>春梦一场罢了</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于spring中日志的使用</title>
    <link href="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>我们现实生活中，我们希望做任何事情都有迹可循，尤其在错误排除方面，所以引入了日志，是为了记录日志是程序的重要组成部分，想象一下，如果程序报错了，不让你打开控制台看日志，那么你能找到报错的原因吗？答案是否定的，写程序不是买彩票，不能完全靠猜，因此日志对于我们来说，最主要的用途就是排除和定位问题。</p><p><strong>Spring 框架本身并不提供日志功能</strong>，而是依赖于外部的日志框架。常用的日志框架包括 Log4j、Logback、java.util.logging 和 SLF4J。Spring 支持与这些日志框架集成，以便根据需要进行配置和使用。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446152505.png" alt="导入依赖的实例"></p><p>上图是我们导入日志时需要导入的包，同时也不要忘记导入相关的依赖到坐标里。</p><p>日志框架通常定义了多个日志级别，用于指定日志的重要性和详细程度。<strong>常见的日志级别包括 DEBUG、INFO、WARN、ERROR 等</strong>。可以根据自己的需求选择适当的日志级别来记录相应的日志信息。开发环境和生产环境中使用不同的配置。在开发环境中，可以将日志级别设置为 DEBUG ，以便进行详细的调试和跟踪。而在生产环境中，应将日志级别设置为较高级别（如 INFO）。</p><p>在使用 Spring 框架时，您需要将所选的日志框架配置到应用程序中。通常，这涉及到添加相应的依赖项到项目的构建文件，并提供一个配置文件来配置日志输出格式、日志级别等。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446578034.png" alt="配置文件对于日志的配置"></p><p><strong>日志记录器</strong>是使用日志框架时的核心组件。Spring 框架建议使用 SLF4J 的日志记录器接口来编写日志代码。可以通过获取一个 Logger 实例，并使用它的方法（如 debug()、info()、error() 等）来记录不同级别的日志信息。如下基于配置文件中的属性创建一个数据源对象，并将其用作应用程序中的数据源。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//创建一个日志记录器。通过 LoggerFactory 类的 getLogger() 方法获取一个 Logger 对象。getLogger() 方法需要传入一个 Class 类型的参数，用于指定日志的名称或标识符。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.<span class="hljs-built_in">getLogger</span>(AppConfig.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446762745.png" alt="日志信息的显示"></p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693446979523.png" alt="在bean对象中对其日志进行相应的编写"></p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693447162211.png" alt="控制台显示的图片"></p><p>通过日志输出，可以了解数据源的创建过程以及配置的属性值。更好的帮助我们编程。<strong>使用日志记录可以帮助我们在开发和调试过程中快速定位问题，跟踪代码的执行路径，并记录关键信息。通过适当配置日志级别，可以在生产环境中减少日志量，从而提高应用程序的性能。</strong></p><hr><h2 id="spring如何对前端获取的数据与数据库进行交互处理。"><a href="#spring如何对前端获取的数据与数据库进行交互处理。" class="headerlink" title="spring如何对前端获取的数据与数据库进行交互处理。"></a>spring如何对前端获取的数据与数据库进行交互处理。</h2><p>Spring MVC 是 Spring 框架提供的一种基于 MVC（Model-View-Controller）模式的 Web 框架。<strong>可以在控制器（Controller）中定义请求处理方法，</strong>然后通过注解将前端传递的数据绑定到方法的参数上。可以使用注解来指定数据的来源（如请求参数、路径变量、请求体等）。然后，使用 Spring 的数据访问技术操作数据库。前端数据传递给控制器：前端通过 HTTP 请求将数据发送给后端的 Spring MVC 控制器。数据可以以不同形式传递，如请求参数、路径变量、请求体等</p><p><code>使用 </code>@RequestParam<code>注解可以将请求参数绑定到控制器方法的参数上。可以通过指定参数名来匹配请求中的对应参数，如</code>@RequestParam(“name”) String username<code>将请求参数中名为 &quot;name&quot; 的值绑定到</code>username&#96; 参数上。该注解还可以设置默认值、是否必须等属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/request1&quot;</span>)<span class="hljs-comment">//url-pattern</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">request1</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(value = <span class="hljs-string">&quot;user&quot;</span>, required = <span class="hljs-literal">false</span>, defaultValue = <span class="hljs-string">&quot;null&quot;</span>) <span class="hljs-built_in">String</span> username</span>)&#123;  <span class="hljs-comment">//就相当于username=request.getParameter(&quot;user&quot;)</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>如果请求的数据是 JSON 或 XML 格式的请求体数据，可以使用 <code>@RequestBody</code> 注解将请求体内容绑定到指定的对象参数上。Spring MVC 使用消息转换器将请求体的内容转换为对象，并将对象作为参数传递给控制器方法。</p><p>控制器方法接收到前端传递的数据后，可以调用业务逻辑层的服务或组件来处理数据。可以进行数据处理、逻辑判断、调用其他服务或组件等操作，对数据进行加工和处理。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693458723002.png" alt="1693458723002"></p><p>在业务逻辑层需要与数据库进行交互时，可以使用 Spring 的数据访问技术来操作数据库。可以选择使用MyBatis来进行数据访问。即进行到我们老生常谈的几部曲：给坐标导入Mybatis依赖，配置mybatis-config.xml文件，在其中配置好数据源、类型别名、映射器等。创建映射器接口：类似UserMapper，用于定义数据库操作的方法。每个方法对应一个 SQL 查询或更新操作。创建映射器 XML 文件（UserMapper.xml）。不要忘记在mybatis-config.xml里面注册映射器文件。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693459452409.png" alt="1693459452409"></p><p>在对数据库进行数据操作时，可以通过 Spring MVC 提供的事务管理功能来保证数据的一致性和完整性。可以使用 <code>@Transactional</code> 注解将控制器方法或业务逻辑层的方法标记为事务，确保一系列数据库操作要么全部成功，要么全部失败回滚。</p><p>经过数据处理和数据库交互后，可以将处理结果封装成合适的数据结构（如实体对象、DTO 对象）并返回给前端。可以使用 <code>ModelAndView</code>、<code>@ResponseBody</code> 注解等方式将数据返回给前端，供前端进行展示和处理。</p><p>比如说从 <code>userService</code> 获取所有用户的列表，并将该列表添加到模型中，然后将模型数据和视图名封装成一个 <code>ModelAndView</code> 对象返回给前端进行展示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123;<br>    List&lt;User&gt; userList = userService.getAllUsers();<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;user-list&quot;</span>)<span class="hljs-comment">//创建一个 ModelAndView 对象，并设置视图名为 &quot;user-list&quot;</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;users&quot;</span>, userList);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个例子就是可以直接通过@ResponseBody注解的方法返回值返还到前端页面。</p><p><img src="/2024/02/02/%E8%B4%BE%E6%B7%BB%E5%85%B3%E4%BA%8Espring%E4%B8%AD%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8/1693459893534.png" alt="1693459893534"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>这是我的第二篇博客</title>
    <link href="/2024/01/31/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/31/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>第二篇博客是测试博客，用以测试是否能够在页面上正常的显示。</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是我的第一篇博客</title>
    <link href="/2024/01/30/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/30/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>花了很大的力气，终于走到了这一步了。</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/30/hello-world/"/>
    <url>/2024/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
